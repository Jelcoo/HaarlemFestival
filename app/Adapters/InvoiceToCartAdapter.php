<?php

namespace App\Adapters;

use App\Models\Cart;
use App\Models\CartItem;
use App\Models\EventDance;
use App\Models\EventYummy;
use App\Models\EventHistory;
use App\Enum\ItemQuantityEnum;
use App\Services\AssetService;
use App\Models\CartItemQuantity;
use App\Repositories\DanceRepository;
use App\Repositories\YummyRepository;
use App\Repositories\ArtistRepository;
use App\Repositories\TicketRepository;
use App\Repositories\HistoryRepository;
use App\Repositories\LocationRepository;
use App\Repositories\RestaurantRepository;

// This code has been generated by Cursor AI
// Prompt 1: Write an adapter to turn a invoice into a cart
// Prompt 2: Can you modify the code to only create the models in memory, and not write them to the database?
// Prompt 3: Please modify the CartItem to set ->event from database\
// And afterwards edited by me
class InvoiceToCartAdapter
{
    private TicketRepository $ticketRepository;
    private DanceRepository $danceRepository;
    private YummyRepository $yummyRepository;
    private HistoryRepository $historyRepository;
    private LocationRepository $locationRepository;
    private RestaurantRepository $restaurantRepository;
    private ArtistRepository $artistRepository;
    private AssetService $assetService;

    public function __construct()
    {
        $this->ticketRepository = new TicketRepository();
        $this->danceRepository = new DanceRepository();
        $this->yummyRepository = new YummyRepository();
        $this->historyRepository = new HistoryRepository();
        $this->locationRepository = new LocationRepository();
        $this->restaurantRepository = new RestaurantRepository();
        $this->artistRepository = new ArtistRepository();
        $this->assetService = new AssetService();
    }

    public function adapt(int $invoiceId): Cart
    {
        // Create a new cart in memory
        $cart = new Cart([
            'id' => 0,
            'user_id' => null,
        ]);

        // Get all tickets for the invoice
        $danceTickets = $this->ticketRepository->getDanceTickets($invoiceId);
        $yummyTickets = $this->ticketRepository->getYummyTickets($invoiceId);
        $historyTickets = $this->ticketRepository->getHistoryTickets($invoiceId);

        // Process dance tickets
        foreach ($danceTickets as $ticket) {
            $cartItem = new CartItem();
            $cartItem->id = 0;
            $cartItem->cart_id = $cart->id;
            $cartItem->event_model = EventDance::class;
            $cartItem->event_id = $ticket->dance_event_id;
            $cartItem->note = null;

            $quantity = new CartItemQuantity();
            $quantity->id = 0;
            $quantity->cart_item_id = $cartItem->id;
            $quantity->type = $ticket->all_access ? ItemQuantityEnum::ALL_ACCESS : ItemQuantityEnum::GENERAL;
            $quantity->quantity = 1;

            $cartItem->quantities = [$quantity];

            // Set event data
            $event = $this->danceRepository->getEventById($ticket->dance_event_id);

            $event->location = $this->locationRepository->getLocationById($event->location_id);
            $event->location->assets = $this->assetService->resolveAssets($event->location, 'cover');
            $event->artists = $this->artistRepository->getArtistsByEventId($ticket->dance_event_id);
            $cartItem->event = $event;

            $cart->items[] = $cartItem;
        }

        // Process yummy tickets
        foreach ($yummyTickets as $ticket) {
            $cartItem = new CartItem();
            $cartItem->id = 0;
            $cartItem->cart_id = $cart->id;
            $cartItem->event_model = EventYummy::class;
            $cartItem->event_id = $ticket->yummy_event_id;
            $cartItem->note = $ticket->note;

            $quantities = [];

            if ($ticket->adult_count > 0) {
                $adultQuantity = new CartItemQuantity();
                $adultQuantity->id = 0;
                $adultQuantity->cart_item_id = $cartItem->id;
                $adultQuantity->type = ItemQuantityEnum::ADULT;
                $adultQuantity->quantity = $ticket->adult_count;
                $quantities[] = $adultQuantity;
            }

            if ($ticket->kids_count > 0) {
                $childQuantity = new CartItemQuantity();
                $childQuantity->id = 0;
                $childQuantity->cart_item_id = $cartItem->id;
                $childQuantity->type = ItemQuantityEnum::CHILD;
                $childQuantity->quantity = $ticket->kids_count;
                $quantities[] = $childQuantity;
            }

            $cartItem->quantities = $quantities;

            // Set event data
            $event = $this->yummyRepository->getEventById($ticket->yummy_event_id);

            $event->restaurant = $this->restaurantRepository->getRestaurantByIdWithLocation($event->restaurant_id);
            $event->restaurant->assets = $this->assetService->resolveAssets($event->restaurant, 'cover');
            $cartItem->event = $event;


            $cart->items[] = $cartItem;
        }

        // Process history tickets
        foreach ($historyTickets as $ticket) {
            $cartItem = new CartItem();
            $cartItem->id = 0;
            $cartItem->cart_id = $cart->id;
            $cartItem->event_model = EventHistory::class;
            $cartItem->event_id = $ticket->history_event_id;
            $cartItem->note = null;

            $quantities = [];

            // Add family ticket quantity if applicable
            if ($ticket->family_ticket) {
                $familyQuantity = new CartItemQuantity();
                $familyQuantity->id = 0;
                $familyQuantity->cart_item_id = $cartItem->id;
                $familyQuantity->type = ItemQuantityEnum::FAMILY;
                $familyQuantity->quantity = 1;
                $quantities[] = $familyQuantity;
            }

            // Add general quantity for total seats
            $generalQuantity = new CartItemQuantity();
            $generalQuantity->id = 0;
            $generalQuantity->cart_item_id = $cartItem->id;
            $generalQuantity->type = ItemQuantityEnum::GENERAL;
            $generalQuantity->quantity = $ticket->total_seats;
            $quantities[] = $generalQuantity;

            $cartItem->quantities = $quantities;

            // Set event data
            $event = $this->historyRepository->getEventById($ticket->history_event_id);

            $cartItem->event = $event;


            $cart->items[] = $cartItem;
        }

        return $cart;
    }
}
